/**
 * @file
 * Configure and start oAuth2 hejmdal server
 */

var bodyParser = require('body-parser');
var express = require('express');
var OAuthServer = require('express-oauth-server');

import model from './oAuth2/oAuth2.memory.model';
console.log(model);

var app = express();

app.oauth = new OAuthServer({
  model: model // See https://github.com/oauthjs/node-oauth2-server for specification
});

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
//app.use(app.oauth.authorize());

/**
 * authorization
 * GET request:
 * - response_type=code - Indicates that your server expects to receive an authorization code
 * - client_id - The client ID you received when you first created the application
 * - redirect_uri - Indicates the URI to return the user to after authorization is complete
 * - scope - One or more scope values indicating which parts of the user's account you wish to access
 * - state - A random string generated by your application, which you'll verify later
 * verifies redirect_uri against client_id
 * response:
 * redirects to redirect_uri and adds authorizationCode in code and state from request is echoed back
 *
 */
app.get('/oauth/authorize', function(req, res) {
  console.log('authorize req', req.query);
  //console.log('app', app.oauth.authorize);
  var autorize = app.oauth.authorize(req.query.client_id);
  console.log('autorize', autorize);
  autorize(req, res).then(function(result, error){
    console.log('result.statusCode', result.statusCode);
    console.log('result.statusMessage', result.statusMessage);
    console.log('error', error);
  });
  //res.send('finito authorize\n');
});

/**
 * token.
 * POST request:
 * - grant_type=authorization_code - The grant type for this flow is authorization_code
 * - code=AUTH_CODE_HERE - This is the code you received in the query string
 * - redirect_uri=REDIRECT_URI - Must be identical to the redirect URI provided in the original link
 * - client_id=CLIENT_ID - The client ID you received when you first created the application
 * - client_secret=CLIENT_SECRET - Since this request is made from server-side code, the secret is included
 * Response:
 * { "access_token":"RsT5OjbzRn430zqMLgV3Ia", "expires_in":3600 }
 * or
 * { "error":"invalid_request" }
 *
 */
app.post('/oauth/token', function(req, res) {
  console.log('token req', req.query);
  var token = app.oauth.token();
  console.log('token', token);
  token(req, res).then(function(result, error){
    console.log('result.statusCode', result.statusCode);
    console.log('result.statusMessage', result.statusMessage);
    console.log('error', error);
  });
  //res.send('finito token\n');
});
// get will cause error
app.get('/oauth/token', app.oauth.token());

/*
app.use(function(req, res) {
  console.log('use');
  res.send('Secret area');
});
*/

module.exports = app;
app.listen(3000);
