/**
 * @file
 * Configure and start oAuth2 hejmdal server
 */

const bodyParser = require('body-parser');
const express = require('express');
const app = express();
import model from './oAuth2/oAuth2.memory.model';

var OAuthServer = require('express-oauth-server');
app.oauth = new OAuthServer({
  model, // See https://github.com/oauthjs/node-oauth2-server for specification
  allowBearerTokensInQueryString: true,
  grants: ['password', 'authorization_code'],
  debug: true
});

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: false}));

/**
 * Middleware for initializing oauth authorization.
 */
function authorizationMiddleware() {
  const options = {
    authenticateHandler: {
      handle: req => {
        return {id: '12345'};
      }
    }
  };
  return app.oauth.authorize(options);
}

/**
 * authorization
 * GET request:
 * - response_type=code - Indicates that your server expects to receive an authorization code
 * - client_id - The client ID you received when you first created the application
 * - redirect_uri - Indicates the URI to return the user to after authorization is complete
 * - scope - One or more scope values indicating which parts of the user's account you wish to access
 * - state - A random string generated by your application, which you'll verify later
 * verifies redirect_uri against client_id
 * response:
 * redirects to redirect_uri and adds authorizationCode in code and state from request is echoed back
 *
 */
app.get(
  '/oauth/authorize',
  (req, res, next) => {
    // Check if user is logged in (This could be done in a middleware)
    // If the user is not logged in, we should redirect user to an separate login endpoint
    next();
  },
  authorizationMiddleware()
);

/**
 * Test callback endpoint
 */
app.get('/callback', (req, res) => {
  res.send(
    `curl -X POST http://localhost:3000/oauth/token -d 'grant_type=authorization_code&code=${
      req.query.code
    }&client_id=foo&client_secret=nightworld&redirect_uri=http://localhost:3000/callback'`
  );
});

/**
 * token.
 * POST request:
 * - grant_type=authorization_code - The grant type for this flow is authorization_code
 * - code=AUTH_CODE_HERE - This is the code you received in the query string
 * - redirect_uri=REDIRECT_URI - Must be identical to the redirect URI provided in the original link
 * - client_id=CLIENT_ID - The client ID you received when you first created the application
 * - client_secret=CLIENT_SECRET - Since this request is made from server-side code, the secret is included
 * Response:
 * { "access_token":"RsT5OjbzRn430zqMLgV3Ia", "expires_in":3600 }
 * or
 * { "error":"invalid_request" }
 *
 */
app.post('/oauth/token', app.oauth.token());

module.exports = app;
app.listen(process.env.port || 3000);
